// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "auth-app/internal/model"

	mock "github.com/stretchr/testify/mock"

	request "auth-app/internal/request"

	response "auth-app/internal/response"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: createUserReq
func (_m *UserService) CreateUser(createUserReq *request.CreateUserRequest) (response.Code, model.User, error) {
	ret := _m.Called(createUserReq)

	var r0 response.Code
	if rf, ok := ret.Get(0).(func(*request.CreateUserRequest) response.Code); ok {
		r0 = rf(createUserReq)
	} else {
		r0 = ret.Get(0).(response.Code)
	}

	var r1 model.User
	if rf, ok := ret.Get(1).(func(*request.CreateUserRequest) model.User); ok {
		r1 = rf(createUserReq)
	} else {
		r1 = ret.Get(1).(model.User)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*request.CreateUserRequest) error); ok {
		r2 = rf(createUserReq)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetJWTByPhoneAndPassword provides a mock function with given fields: phone, password
func (_m *UserService) GetJWTByPhoneAndPassword(phone string, password string) (response.Code, string, error) {
	ret := _m.Called(phone, password)

	var r0 response.Code
	if rf, ok := ret.Get(0).(func(string, string) response.Code); ok {
		r0 = rf(phone, password)
	} else {
		r0 = ret.Get(0).(response.Code)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(phone, password)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(phone, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
