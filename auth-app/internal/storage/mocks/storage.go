// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "auth-app/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *Storage) CreateUser(user model.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchAllUsers provides a mock function with given fields:
func (_m *Storage) FetchAllUsers() ([]model.User, error) {
	ret := _m.Called()

	var r0 []model.User
	if rf, ok := ret.Get(0).(func() []model.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchUserByPhone provides a mock function with given fields: phone
func (_m *Storage) FetchUserByPhone(phone string) (model.User, error) {
	ret := _m.Called(phone)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(string) model.User); ok {
		r0 = rf(phone)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(phone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchUserByPhoneAndPassword provides a mock function with given fields: phone, password
func (_m *Storage) FetchUserByPhoneAndPassword(phone string, password string) (model.User, error) {
	ret := _m.Called(phone, password)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(string, string) model.User); ok {
		r0 = rf(phone, password)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(phone, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t mockConstructorTestingTNewStorage) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
